package com.hd.sys.core.filter;

import java.io.IOException;
import java.util.Arrays;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

@SuppressWarnings("unused")
public class SessionFilter implements Filter {
	// 系统中不需要做登录控制的  jsp,html,action
	private String[] noCheckSession;

	private ApplicationContext ctx = null; 
	
	@Override
	public void destroy() {

	}
	@Override
	public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,
			FilterChain filterChain) throws IOException, ServletException {
		// 如果处理HTTP请求，并且需要访问诸如getHeader或getCookies等在ServletRequest中无法得到的方法，
		// 就要把此request对象构造成HttpServletRequest
		HttpServletRequest request = (HttpServletRequest) servletRequest;
		HttpServletResponse response = (HttpServletResponse) servletResponse;
		ServletContext servletContext = request.getSession().getServletContext();
		getApplicationContext(servletContext);
		
		//判断用户是否直接输入功能URL操作系统功能
		String referer = request.getHeader("referer");

		// 取得当前访问的   路径
		String currentURL = request.getServletPath().substring(1).trim();
		Arrays.sort(noCheckSession);
		if(Arrays.binarySearch(noCheckSession, currentURL) < 0 && !like(currentURL) ){
			HttpSession session = request.getSession();
			if (session.getAttribute("sessionMap") == null || referer == null || "".equals(referer)) {
				// 如果session为空表示用户没有登录 则抛出用户未登录异常
				response.sendError(401) ;
				return  ;
			}
		}
		
		// 在调用此对象的doFilter方法时，激活下一个相关的过滤器。如果没有另一个过滤器与servlet或JSP页面关联，则servlet或JSP页面被激活。
		filterChain.doFilter(request, response);

	}
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// 通过配置文件获取  不需要检查session 访问路径
		noCheckSession = filterConfig.getInitParameter("nochecksession").split(",") ;
		for(int i=0 ;i<noCheckSession.length ;i++){
			noCheckSession[i] = noCheckSession[i].trim() ;
		}
	}
	
	private void getApplicationContext(ServletContext servletContext) {
		ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
	}
	
	/**
	 * 做简单那的模糊匹配，如: usr/*
	 * @author	<a href="mailto:sunjian@iwangding.com">孙剑</a>
	 * @param currentURL
	 * @return
	 */
	private boolean like(String currentURL){
		for(String str : noCheckSession){
			if(str.endsWith("*")){
				if(currentURL.startsWith(str.replace("*", ""))){
					return true;
				}
			}
		}
		
		return false;
	}
}
